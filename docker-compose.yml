---
version: '3.8'

x-airflow-common:
  &airflow-common
  image: smusali/airflow-custom:latest
  environment:
    &airflow-common-env
    AIRFLOW_HOME: /usr/local/airflow
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__WORKER_CONCURRENCY: 4
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'  # Disable loading examples
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_UID: "50000"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # Enable more verbose logging if needed
    # AIRFLOW__LOGGING__LOGGING_LEVEL: 'DEBUG'
    AIRFLOW__LOGGING__BASE_LOG_FOLDER: /usr/local/airflow/logs
    AIRFLOW__LOGGING__LOGGING_LEVEL: 'INFO'
  volumes:
    - ./src/dags:/usr/local/airflow/dags
    - ./logs:/usr/local/airflow/logs  # Shared log volume
  user: "${AIRFLOW_UID:-50000}:0"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      # Custom configuration for PostgreSQL to handle lock timeouts
      POSTGRES_INITDB_ARGS: "--lock-timeout=120s"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 2
      start_period: 5s
    restart: always
    ports:
      - 5432:5432

  pgadmin:
    container_name: airflow_pgadmin_project
    image: dpage/pgadmin4:6.13
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "5050:80"

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 2
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
      DB_HOST: postgres
      DB_PORT: 5432
    command: airflow webserver -p 8080 --workers 4
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
      DB_HOST: postgres
      DB_PORT: 5432
    command: airflow scheduler
    restart: always
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 60s
      timeout: 30s
      retries: 2
      start_period: 60s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  airflow-triggerer:
    <<: *airflow-common
    command: airflow triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 30s
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  neo4j:
    image: neo4j:4.4.14
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j:/data
    environment:
      - NEO4J_AUTH=neo4j/admin

volumes:
  postgres-db-volume:
  logs:  # Define a volume for logs
